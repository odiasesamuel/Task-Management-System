package com.prunny.task.domain;

import static com.prunny.task.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class TaskCommentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaskCommentAllPropertiesEquals(TaskComment expected, TaskComment actual) {
        assertTaskCommentAutoGeneratedPropertiesEquals(expected, actual);
        assertTaskCommentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaskCommentAllUpdatablePropertiesEquals(TaskComment expected, TaskComment actual) {
        assertTaskCommentUpdatableFieldsEquals(expected, actual);
        assertTaskCommentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaskCommentAutoGeneratedPropertiesEquals(TaskComment expected, TaskComment actual) {
        assertThat(actual)
            .as("Verify TaskComment auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaskCommentUpdatableFieldsEquals(TaskComment expected, TaskComment actual) {
        assertThat(actual)
            .as("Verify TaskComment relevant properties")
            .satisfies(a -> assertThat(a.getComment()).as("check comment").isEqualTo(expected.getComment()))
            .satisfies(a -> assertThat(a.getUser_id()).as("check user_id").isEqualTo(expected.getUser_id()))
            .satisfies(a ->
                assertThat(a.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getCreatedAt())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaskCommentUpdatableRelationshipsEquals(TaskComment expected, TaskComment actual) {
        assertThat(actual)
            .as("Verify TaskComment relationships")
            .satisfies(a -> assertThat(a.getTask()).as("check task").isEqualTo(expected.getTask()));
    }
}
